#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebService
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QuanLyDuLichHue")]
	public partial class QuanLyDuLichDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertStore_Lang(Store_Lang instance);
    partial void UpdateStore_Lang(Store_Lang instance);
    partial void DeleteStore_Lang(Store_Lang instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertCategory_Lang(Category_Lang instance);
    partial void UpdateCategory_Lang(Category_Lang instance);
    partial void DeleteCategory_Lang(Category_Lang instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertCity_Lang(City_Lang instance);
    partial void UpdateCity_Lang(City_Lang instance);
    partial void DeleteCity_Lang(City_Lang instance);
    partial void InsertItem(Item instance);
    partial void UpdateItem(Item instance);
    partial void DeleteItem(Item instance);
    partial void InsertItem_Category(Item_Category instance);
    partial void UpdateItem_Category(Item_Category instance);
    partial void DeleteItem_Category(Item_Category instance);
    partial void InsertItem_Lang(Item_Lang instance);
    partial void UpdateItem_Lang(Item_Lang instance);
    partial void DeleteItem_Lang(Item_Lang instance);
    partial void InsertLanguage(Language instance);
    partial void UpdateLanguage(Language instance);
    partial void DeleteLanguage(Language instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertLocation_Lang(Location_Lang instance);
    partial void UpdateLocation_Lang(Location_Lang instance);
    partial void DeleteLocation_Lang(Location_Lang instance);
    partial void InsertPlace(Place instance);
    partial void UpdatePlace(Place instance);
    partial void DeletePlace(Place instance);
    partial void InsertPlace_Lang(Place_Lang instance);
    partial void UpdatePlace_Lang(Place_Lang instance);
    partial void DeletePlace_Lang(Place_Lang instance);
    partial void InsertStore(Store instance);
    partial void UpdateStore(Store instance);
    partial void DeleteStore(Store instance);
    #endregion
		
		public QuanLyDuLichDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["QuanLyDuLichHueConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public QuanLyDuLichDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuanLyDuLichDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuanLyDuLichDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuanLyDuLichDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<Store_Lang> Store_Langs
		{
			get
			{
				return this.GetTable<Store_Lang>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Category_Lang> Category_Langs
		{
			get
			{
				return this.GetTable<Category_Lang>();
			}
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<City_Lang> City_Langs
		{
			get
			{
				return this.GetTable<City_Lang>();
			}
		}
		
		public System.Data.Linq.Table<Item> Items
		{
			get
			{
				return this.GetTable<Item>();
			}
		}
		
		public System.Data.Linq.Table<Item_Category> Item_Categories
		{
			get
			{
				return this.GetTable<Item_Category>();
			}
		}
		
		public System.Data.Linq.Table<Item_Lang> Item_Langs
		{
			get
			{
				return this.GetTable<Item_Lang>();
			}
		}
		
		public System.Data.Linq.Table<Language> Languages
		{
			get
			{
				return this.GetTable<Language>();
			}
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<Location_Lang> Location_Langs
		{
			get
			{
				return this.GetTable<Location_Lang>();
			}
		}
		
		public System.Data.Linq.Table<Place> Places
		{
			get
			{
				return this.GetTable<Place>();
			}
		}
		
		public System.Data.Linq.Table<Place_Lang> Place_Langs
		{
			get
			{
				return this.GetTable<Place_Lang>();
			}
		}
		
		public System.Data.Linq.Table<Store> Stores
		{
			get
			{
				return this.GetTable<Store>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdAccount;
		
		private string _FullName;
		
		private string _Username;
		
		private string _Password;
		
		private System.Nullable<int> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdAccountChanging(int value);
    partial void OnIdAccountChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnRoleChanging(System.Nullable<int> value);
    partial void OnRoleChanged();
    #endregion
		
		public Account()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdAccount", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdAccount
		{
			get
			{
				return this._IdAccount;
			}
			set
			{
				if ((this._IdAccount != value))
				{
					this.OnIdAccountChanging(value);
					this.SendPropertyChanging();
					this._IdAccount = value;
					this.SendPropertyChanged("IdAccount");
					this.OnIdAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(80)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="Int")]
		public System.Nullable<int> Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Store_Lang")]
	public partial class Store_Lang : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IdStore;
		
		private System.Guid _IdLanguage;
		
		private string _StoreName;
		
		private EntityRef<Language> _Language;
		
		private EntityRef<Store> _Store;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdStoreChanging(System.Guid value);
    partial void OnIdStoreChanged();
    partial void OnIdLanguageChanging(System.Guid value);
    partial void OnIdLanguageChanged();
    partial void OnStoreNameChanging(string value);
    partial void OnStoreNameChanged();
    #endregion
		
		public Store_Lang()
		{
			this._Language = default(EntityRef<Language>);
			this._Store = default(EntityRef<Store>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdStore", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdStore
		{
			get
			{
				return this._IdStore;
			}
			set
			{
				if ((this._IdStore != value))
				{
					if (this._Store.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdStoreChanging(value);
					this.SendPropertyChanging();
					this._IdStore = value;
					this.SendPropertyChanged("IdStore");
					this.OnIdStoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdLanguage", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdLanguage
		{
			get
			{
				return this._IdLanguage;
			}
			set
			{
				if ((this._IdLanguage != value))
				{
					if (this._Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdLanguageChanging(value);
					this.SendPropertyChanging();
					this._IdLanguage = value;
					this.SendPropertyChanged("IdLanguage");
					this.OnIdLanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoreName", DbType="NVarChar(150)")]
		public string StoreName
		{
			get
			{
				return this._StoreName;
			}
			set
			{
				if ((this._StoreName != value))
				{
					this.OnStoreNameChanging(value);
					this.SendPropertyChanging();
					this._StoreName = value;
					this.SendPropertyChanged("StoreName");
					this.OnStoreNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_Store_Lang", Storage="_Language", ThisKey="IdLanguage", OtherKey="IdLanguage", IsForeignKey=true)]
		public Language Language
		{
			get
			{
				return this._Language.Entity;
			}
			set
			{
				Language previousValue = this._Language.Entity;
				if (((previousValue != value) 
							|| (this._Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Language.Entity = null;
						previousValue.Store_Langs.Remove(this);
					}
					this._Language.Entity = value;
					if ((value != null))
					{
						value.Store_Langs.Add(this);
						this._IdLanguage = value.IdLanguage;
					}
					else
					{
						this._IdLanguage = default(System.Guid);
					}
					this.SendPropertyChanged("Language");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Store_Store_Lang", Storage="_Store", ThisKey="IdStore", OtherKey="IdStore", IsForeignKey=true)]
		public Store Store
		{
			get
			{
				return this._Store.Entity;
			}
			set
			{
				Store previousValue = this._Store.Entity;
				if (((previousValue != value) 
							|| (this._Store.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Store.Entity = null;
						previousValue.Store_Langs.Remove(this);
					}
					this._Store.Entity = value;
					if ((value != null))
					{
						value.Store_Langs.Add(this);
						this._IdStore = value.IdStore;
					}
					else
					{
						this._IdStore = default(System.Guid);
					}
					this.SendPropertyChanged("Store");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IdCategory;
		
		private EntitySet<Category_Lang> _Category_Langs;
		
		private EntitySet<Item_Category> _Item_Categories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCategoryChanging(System.Guid value);
    partial void OnIdCategoryChanged();
    #endregion
		
		public Category()
		{
			this._Category_Langs = new EntitySet<Category_Lang>(new Action<Category_Lang>(this.attach_Category_Langs), new Action<Category_Lang>(this.detach_Category_Langs));
			this._Item_Categories = new EntitySet<Item_Category>(new Action<Item_Category>(this.attach_Item_Categories), new Action<Item_Category>(this.detach_Item_Categories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCategory", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdCategory
		{
			get
			{
				return this._IdCategory;
			}
			set
			{
				if ((this._IdCategory != value))
				{
					this.OnIdCategoryChanging(value);
					this.SendPropertyChanging();
					this._IdCategory = value;
					this.SendPropertyChanged("IdCategory");
					this.OnIdCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Category_Lang", Storage="_Category_Langs", ThisKey="IdCategory", OtherKey="IdCategory")]
		internal EntitySet<Category_Lang> Category_Langs
		{
			get
			{
				return this._Category_Langs;
			}
			set
			{
				this._Category_Langs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Item_Category", Storage="_Item_Categories", ThisKey="IdCategory", OtherKey="IdCategory")]
		internal EntitySet<Item_Category> Item_Categories
		{
			get
			{
				return this._Item_Categories;
			}
			set
			{
				this._Item_Categories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Category_Langs(Category_Lang entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Category_Langs(Category_Lang entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
		
		private void attach_Item_Categories(Item_Category entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Item_Categories(Item_Category entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category_Lang")]
	public partial class Category_Lang : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IdCategory;
		
		private System.Guid _IdLanguage;
		
		private string _CategoryName;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Language> _Language;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCategoryChanging(System.Guid value);
    partial void OnIdCategoryChanged();
    partial void OnIdLanguageChanging(System.Guid value);
    partial void OnIdLanguageChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    #endregion
		
		public Category_Lang()
		{
			this._Category = default(EntityRef<Category>);
			this._Language = default(EntityRef<Language>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCategory", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdCategory
		{
			get
			{
				return this._IdCategory;
			}
			set
			{
				if ((this._IdCategory != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCategoryChanging(value);
					this.SendPropertyChanging();
					this._IdCategory = value;
					this.SendPropertyChanged("IdCategory");
					this.OnIdCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdLanguage", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdLanguage
		{
			get
			{
				return this._IdLanguage;
			}
			set
			{
				if ((this._IdLanguage != value))
				{
					if (this._Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdLanguageChanging(value);
					this.SendPropertyChanging();
					this._IdLanguage = value;
					this.SendPropertyChanged("IdLanguage");
					this.OnIdLanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(50)")]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Category_Lang", Storage="_Category", ThisKey="IdCategory", OtherKey="IdCategory", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Category_Langs.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Category_Langs.Add(this);
						this._IdCategory = value.IdCategory;
					}
					else
					{
						this._IdCategory = default(System.Guid);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_Category_Lang", Storage="_Language", ThisKey="IdLanguage", OtherKey="IdLanguage", IsForeignKey=true)]
		public Language Language
		{
			get
			{
				return this._Language.Entity;
			}
			set
			{
				Language previousValue = this._Language.Entity;
				if (((previousValue != value) 
							|| (this._Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Language.Entity = null;
						previousValue.Category_Langs.Remove(this);
					}
					this._Language.Entity = value;
					if ((value != null))
					{
						value.Category_Langs.Add(this);
						this._IdLanguage = value.IdLanguage;
					}
					else
					{
						this._IdLanguage = default(System.Guid);
					}
					this.SendPropertyChanged("Language");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IdCity;
		
		private EntitySet<City_Lang> _City_Langs;
		
		private EntitySet<Place> _Places;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCityChanging(System.Guid value);
    partial void OnIdCityChanged();
    #endregion
		
		public City()
		{
			this._City_Langs = new EntitySet<City_Lang>(new Action<City_Lang>(this.attach_City_Langs), new Action<City_Lang>(this.detach_City_Langs));
			this._Places = new EntitySet<Place>(new Action<Place>(this.attach_Places), new Action<Place>(this.detach_Places));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCity", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdCity
		{
			get
			{
				return this._IdCity;
			}
			set
			{
				if ((this._IdCity != value))
				{
					this.OnIdCityChanging(value);
					this.SendPropertyChanging();
					this._IdCity = value;
					this.SendPropertyChanged("IdCity");
					this.OnIdCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_City_Lang", Storage="_City_Langs", ThisKey="IdCity", OtherKey="IdCity")]
		internal EntitySet<City_Lang> City_Langs
		{
			get
			{
				return this._City_Langs;
			}
			set
			{
				this._City_Langs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Place", Storage="_Places", ThisKey="IdCity", OtherKey="IdCity")]
		internal EntitySet<Place> Places
		{
			get
			{
				return this._Places;
			}
			set
			{
				this._Places.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_City_Langs(City_Lang entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_City_Langs(City_Lang entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_Places(Place entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Places(Place entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City_Lang")]
	public partial class City_Lang : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IdCity;
		
		private System.Guid _IdLanguage;
		
		private string _CityName;
		
		private EntityRef<City> _City;
		
		private EntityRef<Language> _Language;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCityChanging(System.Guid value);
    partial void OnIdCityChanged();
    partial void OnIdLanguageChanging(System.Guid value);
    partial void OnIdLanguageChanged();
    partial void OnCityNameChanging(string value);
    partial void OnCityNameChanged();
    #endregion
		
		public City_Lang()
		{
			this._City = default(EntityRef<City>);
			this._Language = default(EntityRef<Language>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCity", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdCity
		{
			get
			{
				return this._IdCity;
			}
			set
			{
				if ((this._IdCity != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCityChanging(value);
					this.SendPropertyChanging();
					this._IdCity = value;
					this.SendPropertyChanged("IdCity");
					this.OnIdCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdLanguage", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdLanguage
		{
			get
			{
				return this._IdLanguage;
			}
			set
			{
				if ((this._IdLanguage != value))
				{
					if (this._Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdLanguageChanging(value);
					this.SendPropertyChanging();
					this._IdLanguage = value;
					this.SendPropertyChanged("IdLanguage");
					this.OnIdLanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityName", DbType="NVarChar(50)")]
		public string CityName
		{
			get
			{
				return this._CityName;
			}
			set
			{
				if ((this._CityName != value))
				{
					this.OnCityNameChanging(value);
					this.SendPropertyChanging();
					this._CityName = value;
					this.SendPropertyChanged("CityName");
					this.OnCityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_City_Lang", Storage="_City", ThisKey="IdCity", OtherKey="IdCity", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.City_Langs.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.City_Langs.Add(this);
						this._IdCity = value.IdCity;
					}
					else
					{
						this._IdCity = default(System.Guid);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_City_Lang", Storage="_Language", ThisKey="IdLanguage", OtherKey="IdLanguage", IsForeignKey=true)]
		public Language Language
		{
			get
			{
				return this._Language.Entity;
			}
			set
			{
				Language previousValue = this._Language.Entity;
				if (((previousValue != value) 
							|| (this._Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Language.Entity = null;
						previousValue.City_Langs.Remove(this);
					}
					this._Language.Entity = value;
					if ((value != null))
					{
						value.City_Langs.Add(this);
						this._IdLanguage = value.IdLanguage;
					}
					else
					{
						this._IdLanguage = default(System.Guid);
					}
					this.SendPropertyChanged("Language");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
    [Serializable]
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Item")]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _IdItem;
		private System.Data.Linq.Binary _ImageItem;
		private System.Nullable<System.Guid> _IdLocation;
		private EntitySet<Item_Category> _Item_Categories;
		private EntitySet<Item_Lang> _Item_Langs;
		private EntityRef<Location> _Location;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdItemChanging(System.Guid value);
    partial void OnIdItemChanged();
    partial void OnImageItemChanging(System.Data.Linq.Binary value);
    partial void OnImageItemChanged();
    partial void OnIdLocationChanging(System.Nullable<System.Guid> value);
    partial void OnIdLocationChanged();
    #endregion

    public Item()
    {
        this._Item_Categories = new EntitySet<Item_Category>(new Action<Item_Category>(this.attach_Item_Categories), new Action<Item_Category>(this.detach_Item_Categories));
        this._Item_Langs = new EntitySet<Item_Lang>(new Action<Item_Lang>(this.attach_Item_Langs), new Action<Item_Lang>(this.detach_Item_Langs));
        this._Location = default(EntityRef<Location>);
        OnCreated();
    }
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdItem", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdItem
		{
			get
			{
				return this._IdItem;
			}
			set
			{
				if ((this._IdItem != value))
				{
					this.OnIdItemChanging(value);
					this.SendPropertyChanging();
					this._IdItem = value;
					this.SendPropertyChanged("IdItem");
					this.OnIdItemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageItem", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary ImageItem
		{
			get
			{
				return this._ImageItem;
			}
			set
			{
				if ((this._ImageItem != value))
				{
					this.OnImageItemChanging(value);
					this.SendPropertyChanging();
					this._ImageItem = value;
					this.SendPropertyChanged("ImageItem");
					this.OnImageItemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdLocation", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IdLocation
		{
			get
			{
				return this._IdLocation;
			}
			set
			{
				if ((this._IdLocation != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdLocationChanging(value);
					this.SendPropertyChanging();
					this._IdLocation = value;
					this.SendPropertyChanged("IdLocation");
					this.OnIdLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Item_Category", Storage="_Item_Categories", ThisKey="IdItem", OtherKey="IdItem")]
		internal EntitySet<Item_Category> Item_Categories
		{
			get
			{
				return this._Item_Categories;
			}
			set
			{
				this._Item_Categories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Item_Lang", Storage="_Item_Langs", ThisKey="IdItem", OtherKey="IdItem")]
		internal EntitySet<Item_Lang> Item_Langs
		{
			get
			{
				return this._Item_Langs;
			}
			set
			{
				this._Item_Langs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Item", Storage="_Location", ThisKey="IdLocation", OtherKey="IdLocation", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._IdLocation = value.IdLocation;
					}
					else
					{
						this._IdLocation = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Item_Categories(Item_Category entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_Item_Categories(Item_Category entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_Item_Langs(Item_Lang entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_Item_Langs(Item_Lang entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Item_Category")]
	public partial class Item_Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IdItem;
		
		private System.Guid _IdCategory;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Item> _Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdItemChanging(System.Guid value);
    partial void OnIdItemChanged();
    partial void OnIdCategoryChanging(System.Guid value);
    partial void OnIdCategoryChanged();
    #endregion
		
		public Item_Category()
		{
			this._Category = default(EntityRef<Category>);
			this._Item = default(EntityRef<Item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdItem", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdItem
		{
			get
			{
				return this._IdItem;
			}
			set
			{
				if ((this._IdItem != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdItemChanging(value);
					this.SendPropertyChanging();
					this._IdItem = value;
					this.SendPropertyChanged("IdItem");
					this.OnIdItemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCategory", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdCategory
		{
			get
			{
				return this._IdCategory;
			}
			set
			{
				if ((this._IdCategory != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCategoryChanging(value);
					this.SendPropertyChanging();
					this._IdCategory = value;
					this.SendPropertyChanged("IdCategory");
					this.OnIdCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Item_Category", Storage="_Category", ThisKey="IdCategory", OtherKey="IdCategory", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Item_Categories.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Item_Categories.Add(this);
						this._IdCategory = value.IdCategory;
					}
					else
					{
						this._IdCategory = default(System.Guid);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Item_Category", Storage="_Item", ThisKey="IdItem", OtherKey="IdItem", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.Item_Categories.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.Item_Categories.Add(this);
						this._IdItem = value.IdItem;
					}
					else
					{
						this._IdItem = default(System.Guid);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Item_Lang")]
	public partial class Item_Lang : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IdItem;
		
		private System.Guid _IdLanguage;
		
		private string _ItemName;
		
		private string _Information;
		
		private string _Audio;
		
		private string _Video;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<Language> _Language;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdItemChanging(System.Guid value);
    partial void OnIdItemChanged();
    partial void OnIdLanguageChanging(System.Guid value);
    partial void OnIdLanguageChanged();
    partial void OnItemNameChanging(string value);
    partial void OnItemNameChanged();
    partial void OnInformationChanging(string value);
    partial void OnInformationChanged();
    partial void OnAudioChanging(string value);
    partial void OnAudioChanged();
    partial void OnVideoChanging(string value);
    partial void OnVideoChanged();
    #endregion
		
		public Item_Lang()
		{
			this._Item = default(EntityRef<Item>);
			this._Language = default(EntityRef<Language>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdItem", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdItem
		{
			get
			{
				return this._IdItem;
			}
			set
			{
				if ((this._IdItem != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdItemChanging(value);
					this.SendPropertyChanging();
					this._IdItem = value;
					this.SendPropertyChanged("IdItem");
					this.OnIdItemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdLanguage", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdLanguage
		{
			get
			{
				return this._IdLanguage;
			}
			set
			{
				if ((this._IdLanguage != value))
				{
					if (this._Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdLanguageChanging(value);
					this.SendPropertyChanging();
					this._IdLanguage = value;
					this.SendPropertyChanged("IdLanguage");
					this.OnIdLanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemName", DbType="NVarChar(50)")]
		public string ItemName
		{
			get
			{
				return this._ItemName;
			}
			set
			{
				if ((this._ItemName != value))
				{
					this.OnItemNameChanging(value);
					this.SendPropertyChanging();
					this._ItemName = value;
					this.SendPropertyChanged("ItemName");
					this.OnItemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Information", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Information
		{
			get
			{
				return this._Information;
			}
			set
			{
				if ((this._Information != value))
				{
					this.OnInformationChanging(value);
					this.SendPropertyChanging();
					this._Information = value;
					this.SendPropertyChanged("Information");
					this.OnInformationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Audio", DbType="Char(300)")]
		public string Audio
		{
			get
			{
				return this._Audio;
			}
			set
			{
				if ((this._Audio != value))
				{
					this.OnAudioChanging(value);
					this.SendPropertyChanging();
					this._Audio = value;
					this.SendPropertyChanged("Audio");
					this.OnAudioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Video", DbType="Char(300)")]
		public string Video
		{
			get
			{
				return this._Video;
			}
			set
			{
				if ((this._Video != value))
				{
					this.OnVideoChanging(value);
					this.SendPropertyChanging();
					this._Video = value;
					this.SendPropertyChanged("Video");
					this.OnVideoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Item_Lang", Storage="_Item", ThisKey="IdItem", OtherKey="IdItem", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.Item_Langs.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.Item_Langs.Add(this);
						this._IdItem = value.IdItem;
					}
					else
					{
						this._IdItem = default(System.Guid);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_Item_Lang", Storage="_Language", ThisKey="IdLanguage", OtherKey="IdLanguage", IsForeignKey=true)]
		public Language Language
		{
			get
			{
				return this._Language.Entity;
			}
			set
			{
				Language previousValue = this._Language.Entity;
				if (((previousValue != value) 
							|| (this._Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Language.Entity = null;
						previousValue.Item_Langs.Remove(this);
					}
					this._Language.Entity = value;
					if ((value != null))
					{
						value.Item_Langs.Add(this);
						this._IdLanguage = value.IdLanguage;
					}
					else
					{
						this._IdLanguage = default(System.Guid);
					}
					this.SendPropertyChanged("Language");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Language")]
	public partial class Language : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IdLanguage;
		
		private string _LanguageName;
		
		private EntitySet<Store_Lang> _Store_Langs;
		
		private EntitySet<Category_Lang> _Category_Langs;
		
		private EntitySet<City_Lang> _City_Langs;
		
		private EntitySet<Item_Lang> _Item_Langs;
		
		private EntitySet<Location_Lang> _Location_Langs;
		
		private EntitySet<Place_Lang> _Place_Langs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdLanguageChanging(System.Guid value);
    partial void OnIdLanguageChanged();
    partial void OnLanguageNameChanging(string value);
    partial void OnLanguageNameChanged();
    #endregion
		
		public Language()
		{
			this._Store_Langs = new EntitySet<Store_Lang>(new Action<Store_Lang>(this.attach_Store_Langs), new Action<Store_Lang>(this.detach_Store_Langs));
			this._Category_Langs = new EntitySet<Category_Lang>(new Action<Category_Lang>(this.attach_Category_Langs), new Action<Category_Lang>(this.detach_Category_Langs));
			this._City_Langs = new EntitySet<City_Lang>(new Action<City_Lang>(this.attach_City_Langs), new Action<City_Lang>(this.detach_City_Langs));
			this._Item_Langs = new EntitySet<Item_Lang>(new Action<Item_Lang>(this.attach_Item_Langs), new Action<Item_Lang>(this.detach_Item_Langs));
			this._Location_Langs = new EntitySet<Location_Lang>(new Action<Location_Lang>(this.attach_Location_Langs), new Action<Location_Lang>(this.detach_Location_Langs));
			this._Place_Langs = new EntitySet<Place_Lang>(new Action<Place_Lang>(this.attach_Place_Langs), new Action<Place_Lang>(this.detach_Place_Langs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdLanguage", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdLanguage
		{
			get
			{
				return this._IdLanguage;
			}
			set
			{
				if ((this._IdLanguage != value))
				{
					this.OnIdLanguageChanging(value);
					this.SendPropertyChanging();
					this._IdLanguage = value;
					this.SendPropertyChanged("IdLanguage");
					this.OnIdLanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageName", DbType="NVarChar(50)")]
		public string LanguageName
		{
			get
			{
				return this._LanguageName;
			}
			set
			{
				if ((this._LanguageName != value))
				{
					this.OnLanguageNameChanging(value);
					this.SendPropertyChanging();
					this._LanguageName = value;
					this.SendPropertyChanged("LanguageName");
					this.OnLanguageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_Store_Lang", Storage="_Store_Langs", ThisKey="IdLanguage", OtherKey="IdLanguage")]
		internal EntitySet<Store_Lang> Store_Langs
		{
			get
			{
				return this._Store_Langs;
			}
			set
			{
				this._Store_Langs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_Category_Lang", Storage="_Category_Langs", ThisKey="IdLanguage", OtherKey="IdLanguage")]
		internal EntitySet<Category_Lang> Category_Langs
		{
			get
			{
				return this._Category_Langs;
			}
			set
			{
				this._Category_Langs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_City_Lang", Storage="_City_Langs", ThisKey="IdLanguage", OtherKey="IdLanguage")]
		internal EntitySet<City_Lang> City_Langs
		{
			get
			{
				return this._City_Langs;
			}
			set
			{
				this._City_Langs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_Item_Lang", Storage="_Item_Langs", ThisKey="IdLanguage", OtherKey="IdLanguage")]
		internal EntitySet<Item_Lang> Item_Langs
		{
			get
			{
				return this._Item_Langs;
			}
			set
			{
				this._Item_Langs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_Location_Lang", Storage="_Location_Langs", ThisKey="IdLanguage", OtherKey="IdLanguage")]
		internal EntitySet<Location_Lang> Location_Langs
		{
			get
			{
				return this._Location_Langs;
			}
			set
			{
				this._Location_Langs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_Place_Lang", Storage="_Place_Langs", ThisKey="IdLanguage", OtherKey="IdLanguage")]
		internal EntitySet<Place_Lang> Place_Langs
		{
			get
			{
				return this._Place_Langs;
			}
			set
			{
				this._Place_Langs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Store_Langs(Store_Lang entity)
		{
			this.SendPropertyChanging();
			entity.Language = this;
		}
		
		private void detach_Store_Langs(Store_Lang entity)
		{
			this.SendPropertyChanging();
			entity.Language = null;
		}
		
		private void attach_Category_Langs(Category_Lang entity)
		{
			this.SendPropertyChanging();
			entity.Language = this;
		}
		
		private void detach_Category_Langs(Category_Lang entity)
		{
			this.SendPropertyChanging();
			entity.Language = null;
		}
		
		private void attach_City_Langs(City_Lang entity)
		{
			this.SendPropertyChanging();
			entity.Language = this;
		}
		
		private void detach_City_Langs(City_Lang entity)
		{
			this.SendPropertyChanging();
			entity.Language = null;
		}
		
		private void attach_Item_Langs(Item_Lang entity)
		{
			this.SendPropertyChanging();
			entity.Language = this;
		}
		
		private void detach_Item_Langs(Item_Lang entity)
		{
			this.SendPropertyChanging();
			entity.Language = null;
		}
		
		private void attach_Location_Langs(Location_Lang entity)
		{
			this.SendPropertyChanging();
			entity.Language = this;
		}
		
		private void detach_Location_Langs(Location_Lang entity)
		{
			this.SendPropertyChanging();
			entity.Language = null;
		}
		
		private void attach_Place_Langs(Place_Lang entity)
		{
			this.SendPropertyChanging();
			entity.Language = this;
		}
		
		private void detach_Place_Langs(Place_Lang entity)
		{
			this.SendPropertyChanging();
			entity.Language = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Location")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IdLocation;
		
		private System.Nullable<System.Guid> _IdStore;
		
		private EntitySet<Item> _Items;
		
		private EntitySet<Location_Lang> _Location_Langs;
		
		private EntityRef<Store> _Store;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdLocationChanging(System.Guid value);
    partial void OnIdLocationChanged();
    partial void OnIdStoreChanging(System.Nullable<System.Guid> value);
    partial void OnIdStoreChanged();
    #endregion
		
		public Location()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			this._Location_Langs = new EntitySet<Location_Lang>(new Action<Location_Lang>(this.attach_Location_Langs), new Action<Location_Lang>(this.detach_Location_Langs));
			this._Store = default(EntityRef<Store>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdLocation", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdLocation
		{
			get
			{
				return this._IdLocation;
			}
			set
			{
				if ((this._IdLocation != value))
				{
					this.OnIdLocationChanging(value);
					this.SendPropertyChanging();
					this._IdLocation = value;
					this.SendPropertyChanged("IdLocation");
					this.OnIdLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdStore", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IdStore
		{
			get
			{
				return this._IdStore;
			}
			set
			{
				if ((this._IdStore != value))
				{
					if (this._Store.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdStoreChanging(value);
					this.SendPropertyChanging();
					this._IdStore = value;
					this.SendPropertyChanged("IdStore");
					this.OnIdStoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Item", Storage="_Items", ThisKey="IdLocation", OtherKey="IdLocation")]
		internal EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Location_Lang", Storage="_Location_Langs", ThisKey="IdLocation", OtherKey="IdLocation")]
		internal EntitySet<Location_Lang> Location_Langs
		{
			get
			{
				return this._Location_Langs;
			}
			set
			{
				this._Location_Langs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Store_Location", Storage="_Store", ThisKey="IdStore", OtherKey="IdStore", IsForeignKey=true)]
		public Store Store
		{
			get
			{
				return this._Store.Entity;
			}
			set
			{
				Store previousValue = this._Store.Entity;
				if (((previousValue != value) 
							|| (this._Store.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Store.Entity = null;
						previousValue.Locations.Remove(this);
					}
					this._Store.Entity = value;
					if ((value != null))
					{
						value.Locations.Add(this);
						this._IdStore = value.IdStore;
					}
					else
					{
						this._IdStore = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Store");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_Location_Langs(Location_Lang entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_Location_Langs(Location_Lang entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Location_Lang")]
	public partial class Location_Lang : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IdLocation;
		
		private System.Guid _IdLanguage;
		
		private string _LocationName;
		
		private EntityRef<Language> _Language;
		
		private EntityRef<Location> _Location;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdLocationChanging(System.Guid value);
    partial void OnIdLocationChanged();
    partial void OnIdLanguageChanging(System.Guid value);
    partial void OnIdLanguageChanged();
    partial void OnLocationNameChanging(string value);
    partial void OnLocationNameChanged();
    #endregion
		
		public Location_Lang()
		{
			this._Language = default(EntityRef<Language>);
			this._Location = default(EntityRef<Location>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdLocation", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdLocation
		{
			get
			{
				return this._IdLocation;
			}
			set
			{
				if ((this._IdLocation != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdLocationChanging(value);
					this.SendPropertyChanging();
					this._IdLocation = value;
					this.SendPropertyChanged("IdLocation");
					this.OnIdLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdLanguage", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdLanguage
		{
			get
			{
				return this._IdLanguage;
			}
			set
			{
				if ((this._IdLanguage != value))
				{
					if (this._Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdLanguageChanging(value);
					this.SendPropertyChanging();
					this._IdLanguage = value;
					this.SendPropertyChanged("IdLanguage");
					this.OnIdLanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationName", DbType="NVarChar(50)")]
		public string LocationName
		{
			get
			{
				return this._LocationName;
			}
			set
			{
				if ((this._LocationName != value))
				{
					this.OnLocationNameChanging(value);
					this.SendPropertyChanging();
					this._LocationName = value;
					this.SendPropertyChanged("LocationName");
					this.OnLocationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_Location_Lang", Storage="_Language", ThisKey="IdLanguage", OtherKey="IdLanguage", IsForeignKey=true)]
		public Language Language
		{
			get
			{
				return this._Language.Entity;
			}
			set
			{
				Language previousValue = this._Language.Entity;
				if (((previousValue != value) 
							|| (this._Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Language.Entity = null;
						previousValue.Location_Langs.Remove(this);
					}
					this._Language.Entity = value;
					if ((value != null))
					{
						value.Location_Langs.Add(this);
						this._IdLanguage = value.IdLanguage;
					}
					else
					{
						this._IdLanguage = default(System.Guid);
					}
					this.SendPropertyChanged("Language");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Location_Lang", Storage="_Location", ThisKey="IdLocation", OtherKey="IdLocation", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.Location_Langs.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.Location_Langs.Add(this);
						this._IdLocation = value.IdLocation;
					}
					else
					{
						this._IdLocation = default(System.Guid);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Place")]
	public partial class Place : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IdPlace;
		
		private System.Data.Linq.Binary _ImagePlace;
		
		private System.Nullable<System.Guid> _IdCity;
		
		private EntitySet<Place_Lang> _Place_Langs;
		
		private EntitySet<Store> _Stores;
		
		private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdPlaceChanging(System.Guid value);
    partial void OnIdPlaceChanged();
    partial void OnImagePlaceChanging(System.Data.Linq.Binary value);
    partial void OnImagePlaceChanged();
    partial void OnIdCityChanging(System.Nullable<System.Guid> value);
    partial void OnIdCityChanged();
    #endregion

    //public Place()
    //{
    //    this._Place_Langs = new EntitySet<Place_Lang>(new Action<Place_Lang>(this.attach_Place_Langs), new Action<Place_Lang>(this.detach_Place_Langs));
    //    this._Stores = new EntitySet<Store>(new Action<Store>(this.attach_Stores), new Action<Store>(this.detach_Stores));
    //    this._City = default(EntityRef<City>);
    //    OnCreated();
    //}
		public Place()
		{
        }
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPlace", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdPlace
		{
			get
			{
				return this._IdPlace;
			}
			set
			{
				if ((this._IdPlace != value))
				{
					this.OnIdPlaceChanging(value);
					this.SendPropertyChanging();
					this._IdPlace = value;
					this.SendPropertyChanged("IdPlace");
					this.OnIdPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePlace", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary ImagePlace
		{
			get
			{
				return this._ImagePlace;
			}
			set
			{
				if ((this._ImagePlace != value))
				{
					this.OnImagePlaceChanging(value);
					this.SendPropertyChanging();
					this._ImagePlace = value;
					this.SendPropertyChanged("ImagePlace");
					this.OnImagePlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCity", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IdCity
		{
			get
			{
				return this._IdCity;
			}
			set
			{
				if ((this._IdCity != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCityChanging(value);
					this.SendPropertyChanging();
					this._IdCity = value;
					this.SendPropertyChanged("IdCity");
					this.OnIdCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Place_Place_Lang", Storage="_Place_Langs", ThisKey="IdPlace", OtherKey="IdPlace")]
		internal EntitySet<Place_Lang> Place_Langs
		{
			get
			{
				return this._Place_Langs;
			}
			set
			{
				this._Place_Langs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Place_Store", Storage="_Stores", ThisKey="IdPlace", OtherKey="IdPlace")]
		internal EntitySet<Store> Stores
		{
			get
			{
				return this._Stores;
			}
			set
			{
				this._Stores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Place", Storage="_City", ThisKey="IdCity", OtherKey="IdCity", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Places.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Places.Add(this);
						this._IdCity = value.IdCity;
					}
					else
					{
						this._IdCity = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Place_Langs(Place_Lang entity)
		{
			this.SendPropertyChanging();
			entity.Place = this;
		}
		
		private void detach_Place_Langs(Place_Lang entity)
		{
			this.SendPropertyChanging();
			entity.Place = null;
		}
		
		private void attach_Stores(Store entity)
		{
			this.SendPropertyChanging();
			entity.Place = this;
		}
		
		private void detach_Stores(Store entity)
		{
			this.SendPropertyChanging();
			entity.Place = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Place_Lang")]
	public partial class Place_Lang : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IdPlace;
		
		private System.Guid _IdLanguage;
		
		private string _PlaceName;
		
		private string _Address;
		
		private string _Information;
		
		private EntityRef<Language> _Language;
		
		private EntityRef<Place> _Place;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdPlaceChanging(System.Guid value);
    partial void OnIdPlaceChanged();
    partial void OnIdLanguageChanging(System.Guid value);
    partial void OnIdLanguageChanged();
    partial void OnPlaceNameChanging(string value);
    partial void OnPlaceNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnInformationChanging(string value);
    partial void OnInformationChanged();
    #endregion
		
		public Place_Lang()
		{
			this._Language = default(EntityRef<Language>);
			this._Place = default(EntityRef<Place>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPlace", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdPlace
		{
			get
			{
				return this._IdPlace;
			}
			set
			{
				if ((this._IdPlace != value))
				{
					if (this._Place.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPlaceChanging(value);
					this.SendPropertyChanging();
					this._IdPlace = value;
					this.SendPropertyChanged("IdPlace");
					this.OnIdPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdLanguage", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdLanguage
		{
			get
			{
				return this._IdLanguage;
			}
			set
			{
				if ((this._IdLanguage != value))
				{
					if (this._Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdLanguageChanging(value);
					this.SendPropertyChanging();
					this._IdLanguage = value;
					this.SendPropertyChanged("IdLanguage");
					this.OnIdLanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlaceName", DbType="NVarChar(100)")]
		public string PlaceName
		{
			get
			{
				return this._PlaceName;
			}
			set
			{
				if ((this._PlaceName != value))
				{
					this.OnPlaceNameChanging(value);
					this.SendPropertyChanging();
					this._PlaceName = value;
					this.SendPropertyChanged("PlaceName");
					this.OnPlaceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(100)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Information", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Information
		{
			get
			{
				return this._Information;
			}
			set
			{
				if ((this._Information != value))
				{
					this.OnInformationChanging(value);
					this.SendPropertyChanging();
					this._Information = value;
					this.SendPropertyChanged("Information");
					this.OnInformationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_Place_Lang", Storage="_Language", ThisKey="IdLanguage", OtherKey="IdLanguage", IsForeignKey=true)]
		public Language Language
		{
			get
			{
				return this._Language.Entity;
			}
			set
			{
				Language previousValue = this._Language.Entity;
				if (((previousValue != value) 
							|| (this._Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Language.Entity = null;
						previousValue.Place_Langs.Remove(this);
					}
					this._Language.Entity = value;
					if ((value != null))
					{
						value.Place_Langs.Add(this);
						this._IdLanguage = value.IdLanguage;
					}
					else
					{
						this._IdLanguage = default(System.Guid);
					}
					this.SendPropertyChanged("Language");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Place_Place_Lang", Storage="_Place", ThisKey="IdPlace", OtherKey="IdPlace", IsForeignKey=true)]
		public Place Place
		{
			get
			{
				return this._Place.Entity;
			}
			set
			{
				Place previousValue = this._Place.Entity;
				if (((previousValue != value) 
							|| (this._Place.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Place.Entity = null;
						previousValue.Place_Langs.Remove(this);
					}
					this._Place.Entity = value;
					if ((value != null))
					{
						value.Place_Langs.Add(this);
						this._IdPlace = value.IdPlace;
					}
					else
					{
						this._IdPlace = default(System.Guid);
					}
					this.SendPropertyChanged("Place");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Store")]
	public partial class Store : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IdStore;
		
		private System.Nullable<System.Guid> _IdPlace;
		
		private EntitySet<Store_Lang> _Store_Langs;
		
		private EntitySet<Location> _Locations;
		
		private EntityRef<Place> _Place;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdStoreChanging(System.Guid value);
    partial void OnIdStoreChanged();
    partial void OnIdPlaceChanging(System.Nullable<System.Guid> value);
    partial void OnIdPlaceChanged();
    #endregion
		
		public Store()
		{
			this._Store_Langs = new EntitySet<Store_Lang>(new Action<Store_Lang>(this.attach_Store_Langs), new Action<Store_Lang>(this.detach_Store_Langs));
			this._Locations = new EntitySet<Location>(new Action<Location>(this.attach_Locations), new Action<Location>(this.detach_Locations));
			this._Place = default(EntityRef<Place>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdStore", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdStore
		{
			get
			{
				return this._IdStore;
			}
			set
			{
				if ((this._IdStore != value))
				{
					this.OnIdStoreChanging(value);
					this.SendPropertyChanging();
					this._IdStore = value;
					this.SendPropertyChanged("IdStore");
					this.OnIdStoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPlace", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IdPlace
		{
			get
			{
				return this._IdPlace;
			}
			set
			{
				if ((this._IdPlace != value))
				{
					if (this._Place.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPlaceChanging(value);
					this.SendPropertyChanging();
					this._IdPlace = value;
					this.SendPropertyChanged("IdPlace");
					this.OnIdPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Store_Store_Lang", Storage="_Store_Langs", ThisKey="IdStore", OtherKey="IdStore")]
		internal EntitySet<Store_Lang> Store_Langs
		{
			get
			{
				return this._Store_Langs;
			}
			set
			{
				this._Store_Langs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Store_Location", Storage="_Locations", ThisKey="IdStore", OtherKey="IdStore")]
		internal EntitySet<Location> Locations
		{
			get
			{
				return this._Locations;
			}
			set
			{
				this._Locations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Place_Store", Storage="_Place", ThisKey="IdPlace", OtherKey="IdPlace", IsForeignKey=true)]
		public Place Place
		{
			get
			{
				return this._Place.Entity;
			}
			set
			{
				Place previousValue = this._Place.Entity;
				if (((previousValue != value) 
							|| (this._Place.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Place.Entity = null;
						previousValue.Stores.Remove(this);
					}
					this._Place.Entity = value;
					if ((value != null))
					{
						value.Stores.Add(this);
						this._IdPlace = value.IdPlace;
					}
					else
					{
						this._IdPlace = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Place");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Store_Langs(Store_Lang entity)
		{
			this.SendPropertyChanging();
			entity.Store = this;
		}
		
		private void detach_Store_Langs(Store_Lang entity)
		{
			this.SendPropertyChanging();
			entity.Store = null;
		}
		
		private void attach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.Store = this;
		}
		
		private void detach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.Store = null;
		}
	}
}
#pragma warning restore 1591
